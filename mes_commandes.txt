Mes commandes personnalis√©es
****************************

0. fblog
Se deplacer dans le projet fotoblog

1. fblogrun
Active l'environnement et lance le serveur pour Fotoblog.

2. bclear
R√©initialise la base de donn√©es Fotoblog et supprime les migrations.

3. uclearall
Supprime tous les utilisateurs dans Fotoblog.

4. oclear
Supprime toutes les donn√©es sauf les utilisateurs dans Fotoblog.

5. uclear
Supprime toutes les donn√©es sauf les super utilisateurs dans Fotoblog.

6. pmig
Fait les migrations pour Fotoblog et applique les changements √† la base de donn√©es.

7. runs
Lance le serveur Django pour Fotoblog sur 0.0.0.0:8000.
   
   
8. csuperuser
Cr√©e un super utilisateur username 'will' email 'willdesign@gmail.com' mot de passe 'willdesign'

9. c10users
Cr√©e 10 utilisateurs
    
    
help:

    
    
# ======================================================
# Aller automatiquement dans salvacode √† l'ouverture
# ======================================================
cd ~/storage/shared/Termux/salvacode

# ======================================================
# Commande Git rapide pour sauvegarder et pousser les changements
# ======================================================
alias save='git add . && git commit -m "Mise √† jour du site" && git push'

# ======================================================
# Alias universel pour cr√©er automatiquement le super utilisateur
# ======================================================
alias csuperuser="source env/bin/activate && python manage.py shell -c \"
from authentification.models import User
if not User.objects.filter(is_superuser=True).exists():
    User.objects.create_superuser(username='will', email='willdesign@gmail.com', password='willdesign')
    print('‚úÖ Superuser cr√©√© !')
else:
    print('‚úÖ Superuser d√©j√† pr√©sent.')
\""

# ======================================================
# Alias universel pour cr√©er automatiquement 20 utilisateurs normaux
# ======================================================
alias cusers="python manage.py shell -c \"
from authentification.models import User
for i in range(1, 21):
    username = f'user{i:02d}'
    email = f'user{i:02d}@example.com'
    if not User.objects.filter(username=username).exists():
        User.objects.create_user(username=username, email=email, password='motdepasse123')
        print(f'Utilisateur {username} cr√©√© !')
    else:
        print(f'Utilisateur {username} d√©j√† pr√©sent.')
\""

# ======================================================
# ALIAS POUR LE PROJET KODEKA
# ======================================================
alias kodeka="cd ~ && source ~/env/bin/activate && cd ~/storage/shared/Termux/Kodeka"
alias mig="cd ~/storage/shared/Termux/Kodeka && python manage.py makemigrations ItemsApp && python manage.py migrate"
alias run="cd ~/storage/shared/Termux/Kodeka && python manage.py runserver"
alias kodeka_clean="rm -f ~/storage/shared/Termux/Kodeka/db.sqlite3 && find ~/storage/shared/Termux/Kodeka/ItemsApp/migrations/ -type f -not -name '__init__.py' -delete"
alias kodeka_superuser="cd ~/storage/shared/Termux/Kodeka && python manage.py shell -c \"from django.contrib.auth import get_user_model; U=get_user_model(); U.objects.filter(email='admin@example.com').exists() or U.objects.create_superuser(nom_complet='Admin', numero='+243900000000', email='admin@example.com', password='motdepasse123'); print('‚úÖ Superuser v√©rifi√©/cr√©√© !')\""
alias kodeka_all="kodeka && kodeka_clean && mig && kodeka_superuser"

# ======================================================
# ALIAS POUR LE PROJET FOTOBLOG
# ======================================================
alias fblog="cd ~ && cd fotoblog-project && source ~/env/bin/activate && cd fotoblog"
alias fblogrun="cd ~ && cd fotoblog-project && source ~/env/bin/activate && cd fotoblog && python manage.py runserver"

alias bclear="read -p '‚ö†Ô∏è Tout sera supprim√© ! Confirmer (y/n) ? ' CONFIRM; \
if [ \"\$CONFIRM\" = \"y\" ]; then \
echo 'üîπ Suppression de la base et des migrations...'; \
rm -f db.sqlite3; \
for app in authentification blog; do \
  echo \"üîπ Nettoyage des migrations de \$app...\"; \
  find \$app/migrations/ -type f -not -name '__init__.py' -delete; \
done; \
echo 'üîπ Cr√©ation des nouvelles migrations...'; \
python manage.py makemigrations authentification blog; \
echo 'üîπ Application des migrations...'; \
python manage.py migrate; \
echo '‚úÖ Base et migrations r√©initialis√©es avec succ√®s !'; \
else echo 'Annul√©'; fi"

alias uclearall="read -p 'Supprimer tous les utilisateurs ? (y/n) ' CONFIRM; if [ \"\$CONFIRM\" = \"y\" ]; then python manage.py shell -c 'from authentification.models import User; User.objects.all().delete()'; else echo 'Annul√©'; fi"
alias oclear="read -p 'Supprimer tout sauf les utilisateurs ? (y/n) ' CONFIRM; if [ \"\$CONFIRM\" = \"y\" ]; then python manage.py shell -c 'from django.apps import apps; models = apps.get_models(); [model.objects.all().delete() for model in models if model.__name__ != \"User\"]'; else echo 'Annul√©'; fi"
alias uclear="read -p 'Supprimer tout sauf les super utilisateurs ? (y/n) ' CONFIRM; if [ \"\$CONFIRM\" = \"y\" ]; then python manage.py shell -c 'from django.apps import apps; from authentification.models import User; users = User.objects.filter(is_superuser=True); for model in apps.get_models(): if model.__name__ == \"User\": model.objects.exclude(pk__in=[u.pk for u in users]).delete(); else: model.objects.all().delete()'; else echo 'Annul√©'; fi"
alias pmig="python manage.py makemigrations && python manage.py migrate"
alias runs="python manage.py runserver 0.0.0.0:8000"